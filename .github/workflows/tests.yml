name: Test

on:
  workflow_dispatch:
  push: { tags: [ "*" ], branches: [ "main", "develop", "stable/*", "release/*", "hotfix/*" ] }

jobs:
  build:
    strategy:
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-latest ]
      fail-fast: true
      max-parallel: 1
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code for tag
        if: startsWith(github.ref, 'refs/tags/')
        uses: actions/checkout@v4
        with:
          submodules: 'true'
          fetch-depth: 1
          fetch-tags: false
      - name: Checkout code for branch
        if: startsWith(github.ref, 'refs/heads/')
        uses: actions/checkout@v4
        with:
          submodules: 'true'
          fetch-depth: 0

      - name: Detect Branch or Tag
        shell: bash
        run: |
          if [[ "$GITHUB_REF" == refs/heads/* ]]; then
            branch_name=${GITHUB_REF#refs/heads/}
            printf '%s\n' "Current branch: $branch_name"
            printf '%s\n' "CIDOER_GIT_REF=$branch_name" >> $GITHUB_ENV
          elif [[ "$GITHUB_REF" == refs/tags/* ]]; then
            tag_name=${GITHUB_REF#refs/tags/}
            printf '%s\n' "Current tag: $tag_name"
            printf '%s\n' "CIDOER_GIT_REF=$tag_name" >> $GITHUB_ENV
          else
            printf '%s\n' "CIDOER_GIT_REF=main" >> $GITHUB_ENV
          fi

      - uses: i3ash/setup-cidoer@v1
        with:
          ref: ${{ env.CIDOER_GIT_REF }}

      - name: Run CIDoer Workflow Test (build & upload)
        working-directory: ${{ github.workspace }}
        shell: bash
        run: |
          source "${CIDOER_CORE_FILE:?}"
          source tests/cidoer.sh
          do_workflow_job build
          do_workflow_job upload

      - name: Run Additional Test Print (Since 1.0)
        working-directory: ${{ github.workspace }}/tests
        shell: bash
        env:
          HELLO: ${{ env.HELLO }}
        run: bash additional.print.sh

      - name: Run Additional Test Core (Since 1.0)
        working-directory: ${{ github.workspace }}/tests
        shell: bash
        env:
          HELLO: ${{ env.HELLO }}
        run: bash additional.core.sh

      - name: Run Additional Test JFF (Since 1.1)
        working-directory: ${{ github.workspace }}/tests
        shell: bash
        run: bash additional.jff.sh

      - name: Setup Bats and Bats Libs
        if: startsWith(runner.os, 'Linux')
        id: setup-bats
        uses: bats-core/bats-action@3.0.0
        with:
          support-path: "${{ github.workspace }}/tests/bats-support"
          assert-path: "${{ github.workspace }}/tests/bats-assert"
          detik-path: "${{ github.workspace }}/tests/bats-detik"
          file-path: "${{ github.workspace }}/tests/bats-file"

      - name: Run Bats Tests
        if: startsWith(runner.os, 'Linux')
        working-directory: ${{ github.workspace }}/tests
        shell: bash
        run: |
          source "${CIDOER_CORE_FILE:?}"
          eval "$(ssh-agent -s)" > /dev/null 2>&1
          do_print_dash_pair 'SSH_AGENT_PID' "$SSH_AGENT_PID"
          do_print_dash_pair 'SSH_AUTH_SOCK' "$SSH_AUTH_SOCK"
          bats ./
          ssh-agent -k

      - name: Run Additional Tests on Docker Bash:3.2 Alpine
        if: startsWith(runner.os, 'Linux')
        continue-on-error: false
        run: |
          docker run --rm \
            -v ${{ github.workspace }}:/workspace \
            -w /workspace/tests \
            bash:3.2-alpine3.21 bash additional.sh
      - name: Run Additional Tests on Docker Bash:4.4 Alpine
        if: startsWith(runner.os, 'Linux')
        continue-on-error: false
        run: |
          docker run --rm \
            -v ${{ github.workspace }}:/workspace \
            -w /workspace/tests \
            bash:4.4-alpine3.20 bash additional.sh
      - name: Run Additional Tests on Docker Alpine
        if: startsWith(runner.os, 'Linux')
        continue-on-error: false
        run: |
          docker run --rm \
            -v ${{ github.workspace }}:/workspace \
            -w /workspace/tests \
            -e KEY_01_PASSPHRASE="${{ secrets.KEY_01_PASSPHRASE }}" \
            -e SSH_KEY_02_PASSPHRASE="${{ secrets.SSH_KEY_02_PASSPHRASE }}" \
            -e KEY_01="${{ secrets.KEY_01 }}" \
            -e SSH_USER_01="${{ vars.SSH_USER_01 }}" \
            -e SSH_HOST_01="${{ secrets.SSH_HOST_01 }}" \
            -e SSH_HOST_02="${{ secrets.SSH_HOST_02 }}" \
            --tmpfs /mnt/bin:exec,size=2m \
            alpine sh -c "apk update && apk add bash openssh-client && bash additional.sh"
      - name: Run Additional Tests on Docker Debian
        if: startsWith(runner.os, 'Linux')
        continue-on-error: false
        run: |
          docker run --rm \
            -v ${{ github.workspace }}:/workspace \
            -w /workspace/tests \
            -e KEY_01_PASSPHRASE="${{ secrets.KEY_01_PASSPHRASE }}" \
            -e SSH_KEY_02_PASSPHRASE="${{ secrets.SSH_KEY_02_PASSPHRASE }}" \
            -e KEY_01="${{ secrets.KEY_01 }}" \
            -e SSH_USER_01="${{ vars.SSH_USER_01 }}" \
            -e SSH_HOST_01="${{ secrets.SSH_HOST_01 }}" \
            -e SSH_HOST_02="${{ secrets.SSH_HOST_02 }}" \
            --tmpfs /mnt/bin:exec,size=2m \
            debian:stable-slim sh -c "apt-get update && apt-get install curl openssh-client -y && bash additional.sh"
